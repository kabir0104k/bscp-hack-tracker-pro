
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';
import { ChevronDown, ChevronRight, Copy, FileText, Clock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface Exploit {
  id: string;
  title: string;
  status: 'todo' | 'done';
  notes: string;
  timeSpent: string;
  tags: string[];
}

interface ExploitCategory {
  id: string;
  name: string;
  icon: string;
  total: number;
  exploits: Exploit[];
  expanded: boolean;
}

const ExploitTracker = () => {
  const { toast } = useToast();
  const [categories, setCategories] = useState<ExploitCategory[]>([
    {
      id: 'xss',
      name: 'XSS Exploits',
      icon: '🚨',
      total: 20,
      expanded: false,
      exploits: [
        { id: 'xss1', title: 'DOM-based XSS with innerHTML', status: 'done', notes: 'Used <svg/onload>, needed double encode', timeSpent: '11m', tags: ['DOM', 'innerHTML'] },
        { id: 'xss2', title: 'Reflected XSS via URL parameter', status: 'done', notes: 'Simple alert() bypass with encoded chars', timeSpent: '8m', tags: ['Reflected'] },
        { id: 'xss3', title: 'Stored XSS in comment field', status: 'todo', notes: '', timeSpent: '', tags: ['Stored'] },
        { id: 'xss4', title: 'XSS via document.write sink', status: 'todo', notes: '', timeSpent: '', tags: ['DOM', 'document.write'] },
        { id: 'xss5', title: 'Bypass WAF with double-encoded payload', status: 'todo', notes: '', timeSpent: '', tags: ['WAF Bypass'] },
        { id: 'xss6', title: 'XSS in AngularJS template', status: 'todo', notes: '', timeSpent: '', tags: ['AngularJS'] },
        { id: 'xss7', title: 'CSP bypass with unsafe-inline', status: 'todo', notes: '', timeSpent: '', tags: ['CSP Bypass'] },
        { id: 'xss8', title: 'XSS via jQuery selector', status: 'todo', notes: '', timeSpent: '', tags: ['jQuery'] },
        { id: 'xss9', title: 'Template literal XSS', status: 'todo', notes: '', timeSpent: '', tags: ['Template Literal'] },
        { id: 'xss10', title: 'Mutation XSS with DOMPurify bypass', status: 'todo', notes: '', timeSpent: '', tags: ['Mutation', 'DOMPurify'] },
      ]
    },
    {
      id: 'sqli',
      name: 'SQL Injection',
      icon: '💉',
      total: 15,
      expanded: false,
      exploits: [
        { id: 'sqli1', title: 'Union-based SQLi data extraction', status: 'done', notes: 'UNION SELECT technique with database enumeration', timeSpent: '25m', tags: ['Union-based'] },
        { id: 'sqli2', title: 'Boolean-based blind SQLi', status: 'todo', notes: '', timeSpent: '', tags: ['Blind', 'Boolean'] },
        { id: 'sqli3', title: 'Time-based blind SQLi', status: 'todo', notes: '', timeSpent: '', tags: ['Blind', 'Time-based'] },
        { id: 'sqli4', title: 'Error-based SQLi information disclosure', status: 'todo', notes: '', timeSpent: '', tags: ['Error-based'] },
        { id: 'sqli5', title: 'Second-order SQLi exploitation', status: 'todo', notes: '', timeSpent: '', tags: ['Second-order'] },
        { id: 'sqli6', title: 'NoSQL injection in MongoDB', status: 'todo', notes: '', timeSpent: '', tags: ['NoSQL', 'MongoDB'] },
        { id: 'sqli7', title: 'SQLi via HTTP headers', status: 'todo', notes: '', timeSpent: '', tags: ['HTTP Headers'] },
        { id: 'sqli8', title: 'SQLi with WAF bypass techniques', status: 'todo', notes: '', timeSpent: '', tags: ['WAF Bypass'] },
      ]
    },
    {
      id: 'idor',
      name: 'IDOR',
      icon: '🔑',
      total: 12,
      expanded: false,
      exploits: [
        { id: 'idor1', title: 'Sequential ID enumeration', status: 'todo', notes: '', timeSpent: '', tags: ['Sequential'] },
        { id: 'idor2', title: 'UUID predictable pattern exploit', status: 'todo', notes: '', timeSpent: '', tags: ['UUID'] },
        { id: 'idor3', title: 'IDOR via HTTP parameter pollution', status: 'todo', notes: '', timeSpent: '', tags: ['HPP'] },
        { id: 'idor4', title: 'Base64 encoded IDOR bypass', status: 'todo', notes: '', timeSpent: '', tags: ['Base64'] },
        { id: 'idor5', title: 'IDOR in API endpoints', status: 'todo', notes: '', timeSpent: '', tags: ['API'] },
        { id: 'idor6', title: 'IDOR via JSON parameter manipulation', status: 'todo', notes: '', timeSpent: '', tags: ['JSON'] },
      ]
    },
    {
      id: 'csrf',
      name: 'CSRF',
      icon: '🔄',
      total: 10,
      expanded: false,
      exploits: [
        { id: 'csrf1', title: 'Basic CSRF token bypass', status: 'todo', notes: '', timeSpent: '', tags: ['Token Bypass'] },
        { id: 'csrf2', title: 'CSRF via SameSite bypass', status: 'todo', notes: '', timeSpent: '', tags: ['SameSite'] },
        { id: 'csrf3', title: 'CSRF with Referer validation bypass', status: 'todo', notes: '', timeSpent: '', tags: ['Referer'] },
        { id: 'csrf4', title: 'CSRF via subdomain takeover', status: 'todo', notes: '', timeSpent: '', tags: ['Subdomain'] },
        { id: 'csrf5', title: 'CSRF in single-page applications', status: 'todo', notes: '', timeSpent: '', tags: ['SPA'] },
      ]
    },
    {
      id: 'ssrf',
      name: 'SSRF',
      icon: '🔗',
      total: 8,
      expanded: false,
      exploits: [
        { id: 'ssrf1', title: 'Basic SSRF to internal services', status: 'todo', notes: '', timeSpent: '', tags: ['Internal'] },
        { id: 'ssrf2', title: 'Blind SSRF with DNS exfiltration', status: 'todo', notes: '', timeSpent: '', tags: ['Blind', 'DNS'] },
        { id: 'ssrf3', title: 'SSRF via URL redirection', status: 'todo', notes: '', timeSpent: '', tags: ['Redirection'] },
        { id: 'ssrf4', title: 'SSRF to AWS metadata service', status: 'todo', notes: '', timeSpent: '', tags: ['AWS', 'Metadata'] },
      ]
    },
    {
      id: 'business',
      name: 'Business Logic',
      icon: '🧠',
      total: 14,
      expanded: false,
      exploits: [
        { id: 'biz1', title: 'Race condition in payment processing', status: 'todo', notes: '', timeSpent: '', tags: ['Race Condition'] },
        { id: 'biz2', title: 'Price manipulation via parameter tampering', status: 'todo', notes: '', timeSpent: '', tags: ['Price Manipulation'] },
        { id: 'biz3', title: 'Workflow bypass via direct object access', status: 'todo', notes: '', timeSpent: '', tags: ['Workflow'] },
        { id: 'biz4', title: 'Infinite money glitch exploitation', status: 'todo', notes: '', timeSpent: '', tags: ['Money Glitch'] },
        { id: 'biz5', title: 'Authentication bypass via user enumeration', status: 'todo', notes: '', timeSpent: '', tags: ['Auth Bypass'] },
      ]
    },
    {
      id: 'jwt',
      name: 'JWT',
      icon: '🎫',
      total: 9,
      expanded: false,
      exploits: [
        { id: 'jwt1', title: 'JWT none algorithm attack', status: 'todo', notes: '', timeSpent: '', tags: ['None Algorithm'] },
        { id: 'jwt2', title: 'JWT key confusion attack', status: 'todo', notes: '', timeSpent: '', tags: ['Key Confusion'] },
        { id: 'jwt3', title: 'JWT weak secret brute force', status: 'todo', notes: '', timeSpent: '', tags: ['Weak Secret'] },
        { id: 'jwt4', title: 'JWT algorithm confusion (RS256 to HS256)', status: 'todo', notes: '', timeSpent: '', tags: ['Algorithm Confusion'] },
      ]
    },
    {
      id: 'smuggling',
      name: 'HTTP Request Smuggling',
      icon: '📦',
      total: 7,
      expanded: false,
      exploits: [
        { id: 'smuggling1', title: 'CL.TE HTTP request smuggling', status: 'todo', notes: '', timeSpent: '', tags: ['CL.TE'] },
        { id: 'smuggling2', title: 'TE.CL HTTP request smuggling', status: 'todo', notes: '', timeSpent: '', tags: ['TE.CL'] },
        { id: 'smuggling3', title: 'TE.TE HTTP request smuggling', status: 'todo', notes: '', timeSpent: '', tags: ['TE.TE'] },
      ]
    },
    {
      id: 'upload',
      name: 'File Upload',
      icon: '📁',
      total: 8,
      expanded: false,
      exploits: [
        { id: 'upload1', title: 'PHP web shell upload bypass', status: 'todo', notes: '', timeSpent: '', tags: ['PHP', 'Web Shell'] },
        { id: 'upload2', title: 'Image metadata XSS payload', status: 'todo', notes: '', timeSpent: '', tags: ['Metadata', 'XSS'] },
        { id: 'upload3', title: 'ZIP slip directory traversal', status: 'todo', notes: '', timeSpent: '', tags: ['ZIP Slip'] },
        { id: 'upload4', title: 'Polyglot file format exploit', status: 'todo', notes: '', timeSpent: '', tags: ['Polyglot'] },
      ]
    },
    {
      id: 'redirect',
      name: 'Open Redirect',
      icon: '↗️',
      total: 6,
      expanded: false,
      exploits: [
        { id: 'redirect1', title: 'Basic open redirect via URL parameter', status: 'todo', notes: '', timeSpent: '', tags: ['URL Parameter'] },
        { id: 'redirect2', title: 'JavaScript-based redirect bypass', status: 'todo', notes: '', timeSpent: '', tags: ['JavaScript'] },
        { id: 'redirect3', title: 'Meta refresh redirect exploitation', status: 'todo', notes: '', timeSpent: '', tags: ['Meta Refresh'] },
      ]
    }
  ]);

  useEffect(() => {
    const savedCategories = localStorage.getItem('exploit-categories');
    if (savedCategories) {
      setCategories(JSON.parse(savedCategories));
    }
  }, []);

  const updateExploit = (categoryId: string, exploitId: string, field: keyof Exploit, value: any) => {
    const updatedCategories = categories.map(category =>
      category.id === categoryId
        ? {
            ...category,
            exploits: category.exploits.map(exploit =>
              exploit.id === exploitId ? { ...exploit, [field]: value } : exploit
            )
          }
        : category
    );
    setCategories(updatedCategories);
    localStorage.setItem('exploit-categories', JSON.stringify(updatedCategories));
  };

  const toggleCategory = (categoryId: string) => {
    const updatedCategories = categories.map(category =>
      category.id === categoryId ? { ...category, expanded: !category.expanded } : category
    );
    setCategories(updatedCategories);
  };

  const copyExploit = (exploit: Exploit) => {
    const text = `${exploit.title}\n\nNotes:\n${exploit.notes}\n\nTime: ${exploit.timeSpent}\nTags: ${exploit.tags.join(', ')}`;
    navigator.clipboard.writeText(text);
    toast({
      title: "Copied!",
      description: "Exploit details copied to clipboard",
    });
  };

  const getCategoryStats = (category: ExploitCategory) => {
    const completed = category.exploits.filter(exploit => exploit.status === 'done').length;
    return { completed, total: category.exploits.length, percentage: Math.round((completed / category.exploits.length) * 100) };
  };

  const totalCompleted = categories.reduce((acc, category) => 
    acc + category.exploits.filter(exploit => exploit.status === 'done').length, 0
  );
  const totalExploits = categories.reduce((acc, category) => acc + category.exploits.length, 0);
  const overallProgress = Math.round((totalCompleted / totalExploits) * 100);

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-br from-red-900/30 to-slate-900/80 border-red-500/30 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="text-2xl text-center">🔥 Exploit Progress Tracker</CardTitle>
          <div className="text-center space-y-2">
            <div className="text-4xl font-bold text-red-400">{totalCompleted} / {totalExploits}</div>
            <div className="text-slate-400">{overallProgress}% Complete</div>
            <Progress value={overallProgress} className="h-3 bg-slate-700" />
          </div>
        </CardHeader>
      </Card>

      <div className="grid gap-4">
        {categories.map((category) => {
          const stats = getCategoryStats(category);
          return (
            <Card key={category.id} className="bg-gradient-to-br from-slate-800/80 to-slate-900/80 border-slate-700/50 backdrop-blur-sm">
              <Collapsible open={category.expanded} onOpenChange={() => toggleCategory(category.id)}>
                <CollapsibleTrigger asChild>
                  <CardHeader className="cursor-pointer hover:bg-slate-800/50 transition-colors">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        {category.expanded ? <ChevronDown className="w-5 h-5" /> : <ChevronRight className="w-5 h-5" />}
                        <span className="text-2xl">{category.icon}</span>
                        <CardTitle className="flex items-center gap-2">
                          {category.name}
                          <Badge variant="outline" className="border-red-500/30 text-red-400">
                            {stats.completed} / {stats.total}
                          </Badge>
                        </CardTitle>
                      </div>
                      <span className="text-xl font-bold text-red-400">{stats.percentage}%</span>
                    </div>
                    <Progress value={stats.percentage} className="h-2 bg-slate-700" />
                  </CardHeader>
                </CollapsibleTrigger>
                <CollapsibleContent>
                  <CardContent className="space-y-4">
                    {category.exploits.map((exploit) => (
                      <div key={exploit.id} className="border border-slate-700/50 rounded-lg p-4 space-y-3 hover:border-slate-600/50 transition-colors">
                        <div className="flex items-start gap-3">
                          <Checkbox
                            checked={exploit.status === 'done'}
                            onCheckedChange={(checked) => updateExploit(category.id, exploit.id, 'status', checked ? 'done' : 'todo')}
                            className="mt-1"
                          />
                          <div className="flex-1 space-y-3">
                            <div className="flex items-start justify-between gap-2">
                              <h4 className={`font-medium ${exploit.status === 'done' ? 'line-through text-slate-400' : 'text-white'}`}>
                                {exploit.title}
                              </h4>
                              <div className="flex gap-2">
                                <Button
                                  size="sm"
                                  variant="ghost"
                                  onClick={() => copyExploit(exploit)}
                                  className="h-8 w-8 p-0"
                                >
                                  <Copy className="w-4 h-4" />
                                </Button>
                              </div>
                            </div>

                            <div className="flex flex-wrap gap-1">
                              {exploit.tags.map((tag, index) => (
                                <Badge key={index} variant="outline" className="text-xs border-slate-600 text-slate-300">
                                  {tag}
                                </Badge>
                              ))}
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                              <div className="space-y-2">
                                <div className="flex items-center gap-2 text-sm text-slate-400">
                                  <Clock className="w-4 h-4" />
                                  Time Spent
                                </div>
                                <Input
                                  placeholder="e.g., 15m, 2h"
                                  value={exploit.timeSpent}
                                  onChange={(e) => updateExploit(category.id, exploit.id, 'timeSpent', e.target.value)}
                                  className="bg-slate-800/50 border-slate-600 text-white"
                                />
                              </div>
                            </div>

                            <div className="space-y-2">
                              <div className="flex items-center gap-2 text-sm text-slate-400">
                                <FileText className="w-4 h-4" />
                                Notes & Payload
                              </div>
                              <Textarea
                                placeholder="Document your approach, payload, and key findings..."
                                value={exploit.notes}
                                onChange={(e) => updateExploit(category.id, exploit.id, 'notes', e.target.value)}
                                className="min-h-[80px] bg-slate-800/50 border-slate-600 text-white placeholder-slate-400"
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </CollapsibleContent>
              </Collapsible>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

export default ExploitTracker;
